/* This file is automatically generated
   do not edit this file directly! */

#include "project1.h"
class Net_101  : public ca::Net {
	public:
	Net_101(ca::NetDef * def,ca::Thread * thread) : ca::Net(def, thread) {
	}
	ca::NetBase * copy() {
		Net_101 *net = new Net_101(*this);
		return net;
	}
	ca::Place<int > place_103;
	void write_reports_content(ca::ThreadBase *thread, ca::Output &output) {
		output.child("place");
		output.set("id", 103);
		{
			ca::Token<int > *t = place_103.begin();
			if (t) {
				do {
					output.child("token");
					output.set("value", ca::token_name(t->value));
					output.back();
					t = t->next;
				} while (t != place_103.begin());
			}
		}
		output.back();
	}
	void receive(ca::ThreadBase *__kaira__thread, int from_process, int place_pos, ca::Unpacker &unpacker) {
		switch(place_pos) {
		}
	}
};
ca::NetBase * spawn_101(ca::ThreadBase *__kaira__thread, ca::NetDef *__kaira__def) {
	Net_101 *__kaira__net = new Net_101(__kaira__def, (ca::Thread*) __kaira__thread);
	ca::Context ctx(__kaira__thread, __kaira__net);
	int __kaira__pid = __kaira__thread->get_process_id();
	if (__kaira__pid == 0) {
		__kaira__net->place_103.add(0);
	}
	return __kaira__net;
}
int main(int argc, char **argv)
{
	ca::project_description("<project library-octave=\"False\" library-rpc=\"False\" target_env=\"C++\"><configuration><build-option name=\"LIBS\" /><build-option name=\"CFLAGS\">-O2</build-option><head-code>\n#include &lt;iostream&gt;\n </head-code></configuration><net id=\"101\" name=\"project1\"><place id=\"103\" label-x=\"-272\" label-y=\"-43\" name=\"x\" radius=\"20\" sx=\"0\" sy=\"0\" x=\"-272\" y=\"-43\"><place-type x=\"-255\" y=\"-26\">int</place-type><init x=\"-255\" y=\"-73\">[0]</init><trace trace-tokens=\"False\" /></place></net></project>");
	std::vector<ca::Parameter*> parameters;

	ca::init(argc, argv, parameters, true);

	ca::NetDef *def_101 = new ca::NetDef(0, 101, spawn_101);
	ca::NetDef *defs[] = {def_101};
	ca::setup(1, defs, true);
	ca::spawn_net(0);
	ca::main();
	return 0;
}
