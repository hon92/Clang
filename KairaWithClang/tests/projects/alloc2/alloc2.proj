<project library-octave="False" library-rpc="False" target_env="C++"><configuration><build-option name="LIBS" /><build-option name="CFLAGS">-O3</build-option><head-code>
class My {
	public:
		My() : name("-") {
			printf("NEW DEFAULT\n");
		}

		My(std::string name) : name(name) {
			printf("NEW %s\n", name.c_str());
		}
		
		My(const My &amp;other) : name(other.name) {
			printf("CPY %s\n", name.c_str());
		}		
	
		~My() {
			printf("DEL %s\n", name.c_str());
		}
		
		My &amp; operator= (const My &amp;other) {
			if (this != &amp;other) {
				printf("OP= %s %s\n", name.c_str(), other.name.c_str());
				name = other.name;
			}
		}
		
		const std::string &amp; get_name() const { return name; }
		
		void unpack(ca::Unpacker &amp;p) {
			p &gt;&gt; name;
		}
		
		void pack(ca::Packer &amp;p) const {
			p &lt;&lt; name;
		}		
		
	protected:
		std::string name;
};

namespace ca {
	CA_TOKEN_NAME(My, my) {
		return "My";
	}	

}</head-code></configuration><net id="101" name="Main"><place id="102" label-x="-157.0" label-y="32.0" name="" radius="20" sx="0" sy="0" x="-157" y="32"><place-type x="-140.0" y="49.0">My</place-type><init x="-140.0" y="2.0" /><code>	place.add(My("a"));
	place.add(My("b"));	
</code></place><place id="107" label-x="125.0" label-y="50.0" name="" radius="20" sx="0" sy="0" x="125.0" y="50.0"><place-type x="142.0" y="67.0">My</place-type><init x="142.0" y="20.0" /></place><place id="115" label-x="-149.0" label-y="114.0" name="" radius="20" sx="0" sy="0" x="-149.0" y="114.0"><place-type x="-132.0" y="131.0">My</place-type><init x="-132.0" y="84.0" /></place><place id="117" label-x="121.0" label-y="231.0" name="" radius="20" sx="0" sy="0" x="121.0" y="231.0"><place-type x="138.0" y="248.0">My</place-type><init x="138.0" y="201.0" /></place><place id="123" label-x="415.0" label-y="191.0" name="" radius="20" sx="0" sy="0" x="415.0" y="191.0"><place-type x="432.0" y="208.0">My</place-type><init x="432.0" y="161.0" /></place><transition clock="False" id="103" label-x="6.0" label-y="49.0" name="Fire 1" priority="" sx="70" sy="35" x="-29" y="31"><guard x="-29" y="11" /><code>	printf("FIRE 1\n");
	var.y.add(My("y"));
</code></transition><transition clock="False" id="109" label-x="120.0" label-y="147.0" name="Fire 2" priority="" sx="70" sy="35" x="85.0" y="129.0"><guard x="85.0" y="109.0" /><code>	printf("FIRE 2\n");
</code></transition><transition clock="False" id="119" label-x="417.0" label-y="113.0" name="Fire 3" priority="" sx="70" sy="35" x="382.0" y="95.0"><guard x="382.0" y="75.0" /><code>	printf("FIRE 3\n");
</code></transition><transition clock="False" id="125" label-x="416.0" label-y="276.0" name="Fire 4" priority="" sx="70" sy="35" x="381.0" y="258.0"><guard x="381.0" y="238.0" /><code>	printf("FIRE 4\n");		
	ctx.quit();
</code></transition><edge from_item="102" id="105" to_item="103"><inscription x="-104.050844107" y="-26.7106682685">[bulk, guard(size == 2)] x</inscription></edge><edge from_item="103" id="108" to_item="107"><inscription x="48.0007943408" y="28.1680772396">[bulk] x</inscription></edge><edge from_item="107" id="110" to_item="109"><inscription x="122.425267723" y="99.4866037878">[bulk, guard(size == 2)] x</inscription></edge><edge from_item="103" id="116" to_item="115"><inscription x="-79.7886878889" y="84.5590906885">[bulk] y</inscription></edge><edge from_item="109" id="118" to_item="117"><inscription x="52.2141896926" y="179.980605359">[bulk] x@1</inscription></edge><edge from_item="117" id="122" to_item="119"><inscription x="188.783685005" y="131.818862591">[bulk, guard(size == 2)] x</inscription></edge><edge from_item="119" id="124" to_item="123"><inscription x="435.026846319" y="146.503243989">[bulk] x</inscription></edge><edge from_item="123" id="126" to_item="125"><inscription x="415.517144433" y="234.499299818">[bulk, guard(size == 2)] x</inscription></edge></net></project>