<project name="matmult" root-directory="/home/honza/Plocha/kaira-git/samples/matmult" target_env="C++"><configuration><build-option name="LIBS" /><build-option name="USE_OCTAVE">True</build-option><build-option name="CFLAGS">-O2 -fPIC</build-option><head-code>
#include &lt;octave/oct.h&gt;
#include &lt;octave/load-save.h&gt;
#include &lt;ls-oct-binary.h&gt;

inline int steps(int process_count) {
	return sqrt(process_count);
}

inline int next1(ca::Context &amp;ctx) {
	int n = steps(ctx.process_count());	
	int r = ctx.process_id() / n;
	int c = ctx.process_id() % n;
	return r * n + ((c + 1) % n);
}

inline int next2(ca::Context &amp;ctx) {
	int n = steps(ctx.process_count());	
	int r = ctx.process_id() / n;
	int c = ctx.process_id() % n;
	return ((r + 1) % n) * n + c;
}



</head-code></configuration><description>&lt;project library-octave="True" library-rpc="True" target_env="C++"&gt;&lt;configuration&gt;&lt;build-option name="LIBS" /&gt;&lt;build-option name="USE_OCTAVE"&gt;True&lt;/build-option&gt;&lt;build-option name="CFLAGS"&gt;-O2 -fPIC&lt;/build-option&gt;&lt;head-code&gt;
#include &amp;lt;octave/oct.h&amp;gt;
#include &amp;lt;octave/load-save.h&amp;gt;
#include &amp;lt;ls-oct-binary.h&amp;gt;

inline int steps(int process_count) {
	return sqrt(process_count);
}

inline int next1(ca::Context &amp;amp;ctx) {
	int n = steps(ctx.process_count());	
	int r = ctx.process_id() / n;
	int c = ctx.process_id() % n;
	return r * n + ((c + 1) % n);
}

inline int next2(ca::Context &amp;amp;ctx) {
	int n = steps(ctx.process_count());	
	int r = ctx.process_id() / n;
	int c = ctx.process_id() % n;
	return ((r + 1) % n) * n + c;
}



&lt;/head-code&gt;&lt;/configuration&gt;&lt;net id="101" name="matmult"&gt;&lt;area id="121" sx="90" sy="96" x="402" y="204"&gt;&lt;init x="323" y="186"&gt;ca::all_processes(ctx)&lt;/init&gt;&lt;/area&gt;&lt;place id="103" label-x="-384" label-y="-30" name="input" radius="20" sx="0" sy="0" x="-384" y="-30"&gt;&lt;place-type x="-367" y="-13"&gt;Matrix&lt;/place-type&gt;&lt;init x="-367" y="-60" /&gt;&lt;code&gt;	Matrix m(4, 4);
	m(0,0) = 100;
	m(0,1) = 1;	
	m(1,0) = 120;		
	m(1,1) = 3;			

	m(0,2) = 1;
	m(0,3) = 2;	
	m(1,2) = 3;		
	m(1,3) = 4;				

	m(2,0) = 10;
	m(2,1) = 11;	
	m(3,0) = 12;		
	m(3,1) = 13;			


	m(2,2) = 14;
	m(2,3) = 15;	
	m(3,2) = 16;		
	m(3,3) = 17;				


	place.add(m);
&lt;/code&gt;&lt;interface in="m1" x="-409" y="-35" /&gt;&lt;trace trace-tokens="False" /&gt;&lt;/place&gt;&lt;place id="104" label-x="150" label-y="84" name="m2" radius="20" sx="0" sy="0" x="150" y="84"&gt;&lt;place-type x="167" y="101"&gt;Matrix&lt;/place-type&gt;&lt;init x="167" y="54" /&gt;&lt;trace trace-tokens="False" /&gt;&lt;/place&gt;&lt;place id="108" label-x="-300" label-y="54" name="" radius="20" sx="0" sy="0" x="-300" y="54"&gt;&lt;place-type x="-283" y="71"&gt;int&lt;/place-type&gt;&lt;init x="-283" y="24"&gt;[0]&lt;/init&gt;&lt;trace trace-tokens="False" /&gt;&lt;/place&gt;&lt;place id="118" label-x="444" label-y="252" name="iter" radius="20" sx="0" sy="0" x="444" y="252"&gt;&lt;place-type x="461" y="269"&gt;int&lt;/place-type&gt;&lt;init x="450" y="210"&gt;[steps(ctx.process_count())]&lt;/init&gt;&lt;trace trace-tokens="False" /&gt;&lt;/place&gt;&lt;place id="125" label-x="-384" label-y="-84" name="input" radius="20" sx="0" sy="0" x="-384" y="-84"&gt;&lt;place-type x="-367" y="-67"&gt;Matrix&lt;/place-type&gt;&lt;init x="-367" y="-114" /&gt;&lt;code&gt;	Matrix m(4, 4);
	m(0,0) = 10;
	m(0,1) = 11;	
	m(1,0) = 12;		
	m(1,1) = 13;			

	m(0,2) = 20;
	m(0,3) = 21;	
	m(1,2) = 22;		
	m(1,3) = 23;				

	m(2,0) = 30;
	m(2,1) = 31;	
	m(3,0) = 32;		
	m(3,1) = 33;			


	m(2,2) = 40;
	m(2,3) = 41;	
	m(3,2) = 42;		
	m(3,3) = 43;				


	place.add(m);
&lt;/code&gt;&lt;interface in="m2" x="-409" y="-89" /&gt;&lt;trace trace-tokens="False" /&gt;&lt;/place&gt;&lt;place id="128" label-x="144" label-y="-60" name="m1" radius="20" sx="0" sy="0" x="144" y="-60"&gt;&lt;place-type x="161" y="-43"&gt;Matrix&lt;/place-type&gt;&lt;init x="161" y="-90" /&gt;&lt;trace trace-tokens="False" /&gt;&lt;/place&gt;&lt;place id="133" label-x="48" label-y="174" name="result" radius="20" sx="0" sy="0" x="48" y="174"&gt;&lt;place-type x="65" y="191"&gt;Matrix&lt;/place-type&gt;&lt;init x="65" y="144" /&gt;&lt;trace trace-tokens="False" /&gt;&lt;/place&gt;&lt;place id="136" label-x="-66" label-y="-66" name="" radius="20" sx="0" sy="0" x="-66" y="-66"&gt;&lt;place-type x="-49" y="-49"&gt;Matrix&lt;/place-type&gt;&lt;init x="-49" y="-96" /&gt;&lt;trace trace-tokens="False" /&gt;&lt;/place&gt;&lt;place id="137" label-x="-66" label-y="72" name="" radius="20" sx="0" sy="0" x="-66" y="72"&gt;&lt;place-type x="-49" y="89"&gt;Matrix&lt;/place-type&gt;&lt;init x="-49" y="42" /&gt;&lt;trace trace-tokens="False" /&gt;&lt;/place&gt;&lt;place id="149" label-x="-108" label-y="252" name="" radius="20" sx="0" sy="0" x="-108" y="252"&gt;&lt;place-type x="-91" y="269"&gt;Matrix&lt;/place-type&gt;&lt;init x="-91" y="222" /&gt;&lt;trace trace-tokens="False" /&gt;&lt;/place&gt;&lt;place id="155" label-x="-378" label-y="252" name="output" radius="20" sx="0" sy="0" x="-378" y="252"&gt;&lt;place-type x="-361" y="269"&gt;Matrix&lt;/place-type&gt;&lt;init x="-361" y="222" /&gt;&lt;interface out="output" x="-403" y="247" /&gt;&lt;trace trace-tokens="False" /&gt;&lt;/place&gt;&lt;transition clock="False" collective="False" id="105" label-x="-205" label-y="6" name="distribute" priority="" sx="70" sy="36" x="-240" y="-12"&gt;&lt;guard x="-192" y="-31"&gt;step &amp;lt; ctx.process_count()&lt;/guard&gt;&lt;code&gt;	int t;
		
	int n = sqrt(ctx.process_count());	
	int rs = var.m1.rows() / n;
	int cs = var.m1.cols() / n;	
	int r = (var.step / n) * rs;
	int c = (var.step % n) * cs;
//	printf("%i : %i %i\n", var.step, r, c);
	var.out1 = var.m1.extract_n(r, c, rs, cs);
	var.out2 = var.m2.extract_n(r, c, rs, cs);	
&lt;/code&gt;&lt;/transition&gt;&lt;transition clock="False" collective="False" id="117" label-x="395" label-y="18" name="compute" priority="" sx="70" sy="36" x="360" y="0"&gt;&lt;guard x="414" y="-24"&gt;step &amp;gt; 0&lt;/guard&gt;&lt;code&gt;	var.result += var.m1 * var.m2;
&lt;/code&gt;&lt;/transition&gt;&lt;transition clock="False" collective="False" id="138" label-x="47" label-y="12" name="prepare" priority="" sx="70" sy="36" x="12" y="-6"&gt;&lt;guard x="12" y="-26" /&gt;&lt;/transition&gt;&lt;transition clock="False" collective="False" id="146" label-x="47" label-y="252" name="gather" priority="" sx="70" sy="36" x="12" y="234"&gt;&lt;guard x="12" y="214" /&gt;&lt;/transition&gt;&lt;transition clock="False" collective="False" id="151" label-x="-265" label-y="252" name="compose&amp;#10;output" priority="" sx="70" sy="36" x="-300" y="234"&gt;&lt;guard x="-300" y="214" /&gt;&lt;code&gt;	int n = sqrt(ctx.process_count());	
	int rs = var.matrix.rows() / n;
	int cs = var.matrix.cols() / n;	
	int i = 0;
	for (ca::Token&amp;lt;Matrix&amp;gt; *t = var.results.begin(); t != NULL; t = var.results.next(t), i++)
	{	
		int r = (i / n) * rs;
		int c = (i % n) * cs;
		var.matrix.insert(t-&amp;gt;value, r, c);
	}
//	std::cout &amp;lt;&amp;lt; var.matrix &amp;lt;&amp;lt; std::endl;
	ctx.quit();
&lt;/code&gt;&lt;/transition&gt;&lt;edge bidirectional="true" from_item="103" id="106" to_item="105"&gt;&lt;inscription x="-326.0" y="-48.0"&gt;m1&lt;/inscription&gt;&lt;point x="-300" y="-30" /&gt;&lt;/edge&gt;&lt;edge from_item="105" id="109" to_item="108"&gt;&lt;inscription x="-258.0" y="60.0"&gt;step+1&lt;/inscription&gt;&lt;point x="-258" y="54" /&gt;&lt;/edge&gt;&lt;edge from_item="108" id="110" to_item="105"&gt;&lt;inscription x="-280.0" y="-10.0"&gt;step&lt;/inscription&gt;&lt;point x="-276" y="6" /&gt;&lt;/edge&gt;&lt;edge from_item="117" id="119" to_item="118"&gt;&lt;inscription x="450.0" y="102.0"&gt;step - 1&lt;/inscription&gt;&lt;point x="444" y="54" /&gt;&lt;/edge&gt;&lt;edge from_item="118" id="120" to_item="117"&gt;&lt;inscription x="462.0" y="0.0"&gt;step&lt;/inscription&gt;&lt;point x="504" y="252" /&gt;&lt;point x="504" y="18" /&gt;&lt;/edge&gt;&lt;edge from_item="117" id="123" to_item="104"&gt;&lt;inscription x="222.0" y="90.0"&gt;[if(step &amp;gt; 1)] m1@next1(ctx)&lt;/inscription&gt;&lt;point x="342" y="84" /&gt;&lt;/edge&gt;&lt;edge from_item="104" id="124" to_item="117"&gt;&lt;inscription x="173.0" y="42.0"&gt;m1&lt;/inscription&gt;&lt;point x="156" y="30" /&gt;&lt;/edge&gt;&lt;edge bidirectional="true" from_item="125" id="126" to_item="105"&gt;&lt;inscription x="-321.0" y="-99.0"&gt;m2&lt;/inscription&gt;&lt;point x="-282" y="-84" /&gt;&lt;/edge&gt;&lt;edge from_item="128" id="131" to_item="117"&gt;&lt;inscription x="222.0" y="-16.0"&gt;m2&lt;/inscription&gt;&lt;point x="150" y="-12" /&gt;&lt;/edge&gt;&lt;edge from_item="117" id="132" to_item="128"&gt;&lt;inscription x="192.0" y="-78.0"&gt;[if(step &amp;gt; 1)] m2@next2(ctx)&lt;/inscription&gt;&lt;point x="348" y="-60" /&gt;&lt;/edge&gt;&lt;edge bidirectional="true" from_item="133" id="134" to_item="117"&gt;&lt;inscription x="224.0" y="153.0"&gt;result&lt;/inscription&gt;&lt;point x="390" y="174" /&gt;&lt;/edge&gt;&lt;edge from_item="105" id="139" to_item="137"&gt;&lt;inscription x="-175.0" y="54.0"&gt;out2@step&lt;/inscription&gt;&lt;point x="-204" y="72" /&gt;&lt;/edge&gt;&lt;edge from_item="105" id="140" to_item="136"&gt;&lt;inscription x="-174.0" y="-84.0"&gt;out1@step&lt;/inscription&gt;&lt;point x="-204" y="-66" /&gt;&lt;/edge&gt;&lt;edge from_item="136" id="141" to_item="138"&gt;&lt;inscription x="-20.0" y="-84.0"&gt;m1&lt;/inscription&gt;&lt;point x="36" y="-66" /&gt;&lt;/edge&gt;&lt;edge from_item="137" id="142" to_item="138"&gt;&lt;inscription x="-13.0" y="54.0"&gt;m2&lt;/inscription&gt;&lt;point x="30" y="72" /&gt;&lt;/edge&gt;&lt;edge from_item="138" id="143" to_item="128"&gt;&lt;inscription x="83.0" y="-47.0"&gt;m2&lt;/inscription&gt;&lt;/edge&gt;&lt;edge from_item="138" id="144" to_item="104"&gt;&lt;inscription x="107.0" y="35.0"&gt;m1&lt;/inscription&gt;&lt;/edge&gt;&lt;edge from_item="138" id="145" to_item="133"&gt;&lt;inscription x="-102.0" y="114.0"&gt;Matrix(m1.rows(), m2.cols())&lt;/inscription&gt;&lt;/edge&gt;&lt;edge from_item="118" id="147" to_item="146"&gt;&lt;inscription x="240.0" y="234.0"&gt;0&lt;/inscription&gt;&lt;/edge&gt;&lt;edge from_item="133" id="148" to_item="146"&gt;&lt;inscription x="59.0" y="211.0"&gt;result&lt;/inscription&gt;&lt;/edge&gt;&lt;edge from_item="146" id="150" to_item="149"&gt;&lt;inscription x="-54.0" y="234.0"&gt;result@0&lt;/inscription&gt;&lt;/edge&gt;&lt;edge from_item="149" id="152" to_item="151"&gt;&lt;inscription x="-224.0" y="198.0"&gt;[svar(sources),
 bulk,
 guard(size == ctx.process_count())]
 results&lt;/inscription&gt;&lt;/edge&gt;&lt;edge from_item="103" id="154" to_item="151"&gt;&lt;inscription x="-372.0" y="122.0"&gt;matrix&lt;/inscription&gt;&lt;point x="-384" y="132" /&gt;&lt;/edge&gt;&lt;edge from_item="151" id="156" to_item="155"&gt;&lt;inscription x="-342.0" y="234.0"&gt;matrix&lt;/inscription&gt;&lt;/edge&gt;&lt;/net&gt;&lt;/project&gt;</description><net id="101" name="matmult"><place id="103" init-expr="" name="input" type="Matrix"><code>	Matrix m(4, 4);
	m(0,0) = 100;
	m(0,1) = 1;	
	m(1,0) = 120;		
	m(1,1) = 3;			

	m(0,2) = 1;
	m(0,3) = 2;	
	m(1,2) = 3;		
	m(1,3) = 4;				

	m(2,0) = 10;
	m(2,1) = 11;	
	m(3,0) = 12;		
	m(3,1) = 13;			


	m(2,2) = 14;
	m(2,3) = 15;	
	m(3,2) = 16;		
	m(3,3) = 17;				


	place.add(m);
</code></place><place id="104" init-expr="" name="m2" type="Matrix" /><place id="108" init-expr="[0]" name="" type="int" /><place id="118" init-expr="[steps(ctx.process_count())]" name="iter" type="int" /><place id="125" init-expr="" name="input" type="Matrix"><code>	Matrix m(4, 4);
	m(0,0) = 10;
	m(0,1) = 11;	
	m(1,0) = 12;		
	m(1,1) = 13;			

	m(0,2) = 20;
	m(0,3) = 21;	
	m(1,2) = 22;		
	m(1,3) = 23;				

	m(2,0) = 30;
	m(2,1) = 31;	
	m(3,0) = 32;		
	m(3,1) = 33;			


	m(2,2) = 40;
	m(2,3) = 41;	
	m(3,2) = 42;		
	m(3,3) = 43;				


	place.add(m);
</code></place><place id="128" init-expr="" name="m1" type="Matrix" /><place id="133" init-expr="" name="result" type="Matrix" /><place id="136" init-expr="" name="" type="Matrix" /><place id="137" init-expr="" name="" type="Matrix" /><place id="149" init-expr="" name="" type="Matrix" /><place id="155" init-expr="" name="output" type="Matrix" /><transition clock="False" collective="False" guard="step &lt; ctx.process_count()" id="105" name="distribute" priority=""><code>	int t;
		
	int n = sqrt(ctx.process_count());	
	int rs = var.m1.rows() / n;
	int cs = var.m1.cols() / n;	
	int r = (var.step / n) * rs;
	int c = (var.step % n) * cs;
//	printf("%i : %i %i\n", var.step, r, c);
	var.out1 = var.m1.extract_n(r, c, rs, cs);
	var.out2 = var.m2.extract_n(r, c, rs, cs);	
</code><edge-in expr="m1" id="106" place-id="103" /><edge-in expr="step" id="110" place-id="108" /><edge-in expr="m2" id="126" place-id="125" /><edge-out expr="step+1" id="109" place-id="108" /><edge-out expr="out2@step" id="139" place-id="137" /><edge-out expr="out1@step" id="140" place-id="136" /><edge-out expr="m1" id="106" place-id="103" /><edge-out expr="m2" id="126" place-id="125" /></transition><transition clock="False" collective="False" guard="step &gt; 0" id="117" name="compute" priority=""><code>	var.result += var.m1 * var.m2;
</code><edge-in expr="step" id="120" place-id="118" /><edge-in expr="m1" id="124" place-id="104" /><edge-in expr="m2" id="131" place-id="128" /><edge-in expr="result" id="134" place-id="133" /><edge-out expr="step - 1" id="119" place-id="118" /><edge-out expr="[if(step &gt; 1)] m1@next1(ctx)" id="123" place-id="104" /><edge-out expr="[if(step &gt; 1)] m2@next2(ctx)" id="132" place-id="128" /><edge-out expr="result" id="134" place-id="133" /></transition><transition clock="False" collective="False" guard="" id="138" name="prepare" priority=""><edge-in expr="m1" id="141" place-id="136" /><edge-in expr="m2" id="142" place-id="137" /><edge-out expr="m2" id="143" place-id="128" /><edge-out expr="m1" id="144" place-id="104" /><edge-out expr="Matrix(m1.rows(), m2.cols())" id="145" place-id="133" /></transition><transition clock="False" collective="False" guard="" id="146" name="gather" priority=""><edge-in expr="0" id="147" place-id="118" /><edge-in expr="result" id="148" place-id="133" /><edge-out expr="result@0" id="150" place-id="149" /></transition><transition clock="False" collective="False" guard="" id="151" name="compose&#10;output" priority=""><code>	int n = sqrt(ctx.process_count());	
	int rs = var.matrix.rows() / n;
	int cs = var.matrix.cols() / n;	
	int i = 0;
	for (ca::Token&lt;Matrix&gt; *t = var.results.begin(); t != NULL; t = var.results.next(t), i++)
	{	
		int r = (i / n) * rs;
		int c = (i % n) * cs;
		var.matrix.insert(t-&gt;value, r, c);
	}
//	std::cout &lt;&lt; var.matrix &lt;&lt; std::endl;
	ctx.quit();
</code><edge-in expr="[svar(sources),&#10; bulk,&#10; guard(size == ctx.process_count())]&#10; results" id="152" place-id="149" /><edge-in expr="matrix" id="154" place-id="103" /><edge-out expr="matrix" id="156" place-id="155" /></transition><area id="121" init-expr="ca::all_processes(ctx)" name=""><place id="118" /></area></net></project>