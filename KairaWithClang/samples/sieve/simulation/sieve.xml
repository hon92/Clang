<project name="sieve" root-directory="/home/honza/Plocha/kaira-git/samples/sieve" target_env="C++"><configuration><parameter default="100" description="" name="N" policy="mandatory" type="int" /><build-option name="LIBS" /><build-option name="CFLAGS">-O0 -ggdb</build-option><head-code>
struct Segment{
	std::vector&lt;bool&gt; marks;
	int start;
};


namespace ca {
	
	CA_TOKEN_NAME(Segment, segment) {
		std::stringstream s;
		s &lt;&lt; "[" &lt;&lt; segment.start &lt;&lt; "," &lt;&lt; segment.start + segment.marks.size() - 1 &lt;&lt; "]";
		for (int i = 0; i &lt; segment.marks.size(); i++) {
			if (segment.marks[i]) {
				s &lt;&lt; " " &lt;&lt; segment.start + i;
			}
		}
		return s.str();
	}
}</head-code></configuration><description>&lt;project library-octave="False" library-rpc="False" target_env="C++"&gt;&lt;configuration&gt;&lt;parameter default="100" description="" name="N" policy="mandatory" type="int" /&gt;&lt;build-option name="LIBS" /&gt;&lt;build-option name="CFLAGS"&gt;-O0 -ggdb&lt;/build-option&gt;&lt;head-code&gt;
struct Segment{
	std::vector&amp;lt;bool&amp;gt; marks;
	int start;
};


namespace ca {
	
	CA_TOKEN_NAME(Segment, segment) {
		std::stringstream s;
		s &amp;lt;&amp;lt; "[" &amp;lt;&amp;lt; segment.start &amp;lt;&amp;lt; "," &amp;lt;&amp;lt; segment.start + segment.marks.size() - 1 &amp;lt;&amp;lt; "]";
		for (int i = 0; i &amp;lt; segment.marks.size(); i++) {
			if (segment.marks[i]) {
				s &amp;lt;&amp;lt; " " &amp;lt;&amp;lt; segment.start + i;
			}
		}
		return s.str();
	}
}&lt;/head-code&gt;&lt;/configuration&gt;&lt;net id="101" name="Main"&gt;&lt;area id="118" sx="120" sy="90" x="-102" y="-66"&gt;&lt;init x="-90" y="-85"&gt;all_processes(ctx)&lt;/init&gt;&lt;/area&gt;&lt;place id="102" label-x="-66" label-y="-30" name="segment" radius="20" sx="22" sy="4" x="-66" y="-30"&gt;&lt;place-type x="-35" y="-2"&gt;Segment&lt;/place-type&gt;&lt;init x="-49" y="-60" /&gt;&lt;code&gt;	int s = (param::N() - 2) / ctx.process_count() + 1;
	Segment segment;	
	segment.start = ctx.process_id() * s + 2;
	if (segment.start + s &amp;gt; param::N()) {
		s = param::N() - segment.start;
	}
	segment.marks.resize(s, true);
	place.add(segment);
&lt;/code&gt;&lt;trace trace-tokens="False" /&gt;&lt;/place&gt;&lt;place id="104" label-x="66" label-y="60" name="number" radius="20" sx="12" sy="6" x="66" y="60"&gt;&lt;place-type x="90" y="84"&gt;int&lt;/place-type&gt;&lt;init x="90" y="30"&gt;[2]&lt;/init&gt;&lt;trace trace-tokens="False" /&gt;&lt;/place&gt;&lt;place id="107" label-x="240" label-y="60" name="next&amp;#10;number" radius="20" sx="12" sy="6" x="240" y="60"&gt;&lt;place-type x="270" y="84"&gt;int&lt;/place-type&gt;&lt;init x="257" y="30" /&gt;&lt;trace trace-tokens="False" /&gt;&lt;/place&gt;&lt;place id="109" label-x="402" label-y="-30" name="prime" radius="20" sx="12" sy="0" x="402" y="-30"&gt;&lt;place-type x="432" y="-6"&gt;int&lt;/place-type&gt;&lt;init x="419" y="-60" /&gt;&lt;trace trace-tokens="False" /&gt;&lt;/place&gt;&lt;transition clock="False" collective="False" id="103" label-x="161" label-y="-30" name="Find&amp;#10;prime" priority="" sx="70" sy="36" x="126" y="-48"&gt;&lt;guard x="126" y="-68" /&gt;&lt;code&gt;
	int end = var.segment.start + var.segment.marks.size();

	if (var.num * var.num &amp;gt; param::N()) {		
		for (int i = var.num; i &amp;lt; end; i++) {
			if (var.segment.marks[i - var.segment.start]) {		
				printf("%i\n", i);
			}
		}
	} else {
		for (int i = var.num; i &amp;lt; end; i++) {
			if (var.segment.marks[i - var.segment.start]) {		
				printf("%i\n", i);
				var.prime = i;
				var.next_num = i+1;
				var.targets = ca::range(ctx.process_id(), ctx.process_count());
				return;
			}
		}
	}
	var.prime = -1;
	var.next_num = -1;
	int next = ctx.process_id() + 1;
	if (next == ctx.process_count()) {
		ctx.quit();
	} else {
		var.targets.push_back(next);
	}
&lt;/code&gt;&lt;/transition&gt;&lt;transition clock="False" collective="False" id="111" label-x="161" label-y="156" name="Mark&amp;#10;composites" priority="" sx="70" sy="36" x="126" y="138"&gt;&lt;guard x="126" y="118" /&gt;&lt;code&gt;	if (var.prime == -1) {
		var.start.add(var.segment.start);	
	} else {
		for (int i = (var.prime - (var.segment.start % var.prime)) % var.prime; i &amp;lt; var.segment.marks.size(); i += var.prime) {
			var.segment.marks[i] = false;
		}
	}
	
&lt;/code&gt;&lt;/transition&gt;&lt;edge bidirectional="true" from_item="102" id="105" to_item="103"&gt;&lt;inscription x="31.0" y="-47.0"&gt;segment&lt;/inscription&gt;&lt;/edge&gt;&lt;edge from_item="104" id="106" to_item="103"&gt;&lt;inscription x="82.0" y="2.0"&gt;num&lt;/inscription&gt;&lt;point x="72" y="0" /&gt;&lt;/edge&gt;&lt;edge from_item="103" id="108" to_item="107"&gt;&lt;inscription x="252.0" y="6.0"&gt;[if(next_num &amp;gt; 0)] next_num&lt;/inscription&gt;&lt;point x="246" y="0" /&gt;&lt;/edge&gt;&lt;edge from_item="103" id="110" to_item="109"&gt;&lt;inscription x="225.0" y="-48.0"&gt;[multicast] prime@targets&lt;/inscription&gt;&lt;/edge&gt;&lt;edge from_item="109" id="113" to_item="111"&gt;&lt;inscription x="420.0" y="68.0"&gt;prime&lt;/inscription&gt;&lt;point x="408" y="156" /&gt;&lt;/edge&gt;&lt;edge from_item="107" id="114" to_item="111"&gt;&lt;inscription x="252.0" y="108.0"&gt;[bulk] start&lt;/inscription&gt;&lt;point x="246" y="126" /&gt;&lt;/edge&gt;&lt;edge from_item="111" id="115" to_item="104"&gt;&lt;inscription x="84.0" y="108.0"&gt;[bulk] start&lt;/inscription&gt;&lt;point x="72" y="126" /&gt;&lt;/edge&gt;&lt;edge bidirectional="true" from_item="111" id="116" to_item="102"&gt;&lt;inscription x="-42.0" y="66.0"&gt;segment&lt;/inscription&gt;&lt;point x="-54" y="156" /&gt;&lt;/edge&gt;&lt;/net&gt;&lt;sequence name="Sequence23"&gt;0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
3 0 S #111
3 0 F
1 0 S #111
1 0 F
0 0 S #111
0 0 F
2 0 S #111
2 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
1 0 S #111
1 0 F
3 0 S #111
3 0 F
2 0 S #111
2 0 F
0 0 S #111
0 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
2 0 S #111
2 0 F
1 0 S #111
1 0 F
3 0 S #111
3 0 F
0 0 S #111
0 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
1 0 S #111
1 0 F
0 0 S #111
0 0 F
2 0 S #111
2 0 F
3 0 S #111
3 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
1 0 S #111
1 0 F
2 0 S #111
2 0 F
3 0 S #111
3 0 F
0 0 S #111
0 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
1 0 S #111
1 0 F
3 0 S #111
3 0 F
2 0 S #111
2 0 F
0 0 S #111
0 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
2 0 S #111
2 0 F
3 0 S #111
3 0 F
0 0 S #111
0 0 F
1 0 S #111
1 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
3 0 S #111
3 0 F
0 0 S #111
0 0 F
1 0 S #111
1 0 F
2 0 S #111
2 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0&lt;/sequence&gt;&lt;sequence name="XSequence"&gt;0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
3 0 S #111
3 0 F
1 0 S #111
1 0 F
0 0 S #111
0 0 F
2 0 S #111
2 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
1 0 S #111
1 0 F
3 0 S #111
3 0 F
2 0 S #111
2 0 F
0 0 S #111
0 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
2 0 S #111
2 0 F
1 0 S #111
1 0 F
3 0 S #111
3 0 F
0 0 S #111
0 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
1 0 S #111
1 0 F
0 0 S #111
0 0 F
2 0 S #111
2 0 F
3 0 S #111
3 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
1 0 S #111
1 0 F
2 0 S #111
2 0 F
3 0 S #111
3 0 F
0 0 S #111
0 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
1 0 S #111
1 0 F
3 0 S #111
3 0 F
2 0 S #111
2 0 F
0 0 S #111
0 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
2 0 S #111
2 0 F
3 0 S #111
3 0 F
0 0 S #111
0 0 F
1 0 S #111
1 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
3 0 S #111
3 0 F
0 0 S #111
0 0 F
1 0 S #111
1 0 F
2 0 S #111
2 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
1 0 S #111
1 0 F
2 0 S #111
2 0 F
0 0 S #111
0 0 F
3 0 S #111
3 0 F
0 0 S #103
0 0 F
1 0 R 0
1 0 S #111
1 0 F
1 0 S #103
1 0 F
1 0 R 1
2 0 R 1
3 0 R 1
2 0 S #111
2 0 F
3 0 S #111
3 0 F
1 0 S #111
1 0 F
1 0 S #103
1 0 F
1 0 R 1
2 0 R 1
3 0 R 1
3 0 S #111
3 0 F
1 0 S #111
1 0 F
2 0 S #111
2 0 F
1 0 S #103
1 0 F
1 0 R 1
2 0 R 1
3 0 R 1
1 0 S #111
1 0 F
3 0 S #111
3 0 F
2 0 S #111
2 0 F
1 0 S #103
1 0 F
1 0 R 1
2 0 R 1
3 0 R 1
2 0 S #111
2 0 F
1 0 S #111
1 0 F
3 0 S #111
3 0 F
1 0 S #103
1 0 F
1 0 R 1
2 0 R 1
3 0 R 1
1 0 S #111
1 0 F
3 0 S #111
3 0 F
2 0 S #111
2 0 F
1 0 S #103
1 0 F
1 0 R 1
2 0 R 1
3 0 R 1
2 0 S #111
2 0 F
1 0 S #111
1 0 F
3 0 S #111
3 0 F
1 0 S #103
1 0 F
1 0 R 1
2 0 R 1
3 0 R 1
3 0 S #111
3 0 F
1 0 S #111
1 0 F
2 0 S #111
2 0 F
1 0 S #103
1 0 F
2 0 R 1
2 0 S #111
2 0 F
2 0 S #103
2 0 F
2 0 R 2
3 0 R 2
2 0 S #111
2 0 F
3 0 S #111
3 0 F&lt;/sequence&gt;&lt;/project&gt;</description><net id="101" name="Main"><place id="102" init-expr="" name="segment" type="Segment"><code>	int s = (param::N() - 2) / ctx.process_count() + 1;
	Segment segment;	
	segment.start = ctx.process_id() * s + 2;
	if (segment.start + s &gt; param::N()) {
		s = param::N() - segment.start;
	}
	segment.marks.resize(s, true);
	place.add(segment);
</code></place><place id="104" init-expr="[2]" name="number" type="int" /><place id="107" init-expr="" name="next&#10;number" type="int" /><place id="109" init-expr="" name="prime" type="int" /><transition clock="False" collective="False" guard="" id="103" name="Find&#10;prime" priority=""><code>
	int end = var.segment.start + var.segment.marks.size();

	if (var.num * var.num &gt; param::N()) {		
		for (int i = var.num; i &lt; end; i++) {
			if (var.segment.marks[i - var.segment.start]) {		
				printf("%i\n", i);
			}
		}
	} else {
		for (int i = var.num; i &lt; end; i++) {
			if (var.segment.marks[i - var.segment.start]) {		
				printf("%i\n", i);
				var.prime = i;
				var.next_num = i+1;
				var.targets = ca::range(ctx.process_id(), ctx.process_count());
				return;
			}
		}
	}
	var.prime = -1;
	var.next_num = -1;
	int next = ctx.process_id() + 1;
	if (next == ctx.process_count()) {
		ctx.quit();
	} else {
		var.targets.push_back(next);
	}
</code><edge-in expr="segment" id="105" place-id="102" /><edge-in expr="num" id="106" place-id="104" /><edge-out expr="[if(next_num &gt; 0)] next_num" id="108" place-id="107" /><edge-out expr="[multicast] prime@targets" id="110" place-id="109" /><edge-out expr="segment" id="105" place-id="102" /></transition><transition clock="False" collective="False" guard="" id="111" name="Mark&#10;composites" priority=""><code>	if (var.prime == -1) {
		var.start.add(var.segment.start);	
	} else {
		for (int i = (var.prime - (var.segment.start % var.prime)) % var.prime; i &lt; var.segment.marks.size(); i += var.prime) {
			var.segment.marks[i] = false;
		}
	}
	
</code><edge-in expr="prime" id="113" place-id="109" /><edge-in expr="[bulk] start" id="114" place-id="107" /><edge-in expr="segment" id="116" place-id="102" /><edge-out expr="[bulk] start" id="115" place-id="104" /><edge-out expr="segment" id="116" place-id="102" /></transition><area id="118" init-expr="all_processes(ctx)" name=""><place id="102" /></area></net></project>